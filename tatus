[1mdiff --git a/Controller.py b/Controller.py[m
[1mindex fa0e0e0..0772400 100644[m
[1m--- a/Controller.py[m
[1m+++ b/Controller.py[m
[36m@@ -7,6 +7,7 @@[m [mimport DataFilter[m
 import pid[m
 import Slope[m
 import ControllerState[m
[32m+[m[32mfrom dataclasses import dataclass, asdict[m
 [m
 log = logging.getLogger(__name__)[m
 # log.level = logging.DEBUG[m
[36m@@ -38,7 +39,6 @@[m [mclass Controller:[m
             if self.controller_state.firing_on():[m
                 self.control_loop.start_firing()[m
 [m
[31m-[m
     def auto_manual(self):[m
         if not self.controller_state.get_state().manual:[m
             self.controller_state.manual_on()[m
[36m@@ -58,11 +58,23 @@[m [mclass Controller:[m
             self.control_loop.set_heat_for_zone_number(heat, zone_number)[m
 [m
 [m
[32m+[m[32m@dataclass[m
[32m+[m[32mclass ZoneStatus:[m
[32m+[m[32m    time_ms: int[m
[32m+[m[32m    temperature: float[m
[32m+[m[32m    curve_data: list[m
[32m+[m[32m    heat_factor: float = 0[m
[32m+[m[32m    slope: float = 0[m
[32m+[m[32m    curvature: float = 0[m
[32m+[m[32m    stderror: float = 0[m
[32m+[m[32m    pstdev: float = 0[m
[32m+[m[32m    target: str = 'Off'[m
[32m+[m[32m    target_slope: float = 0[m
[32m+[m
 class ControlLoop:[m
     def __init__(self, zones, broker, controller_state):[m
         self.profile = Profile.Profile()[m
 [m
[31m-[m
         self.profile_names = self.get_profile_names()[m
         self.zones = zones[m
 [m
[36m@@ -88,9 +100,6 @@[m [mclass ControlLoop:[m
         self.start_time_ms = None[m
         self.min_temp = 0[m
 [m
[31m-        # self.send_updated_profile(self.profile.name, self.profile.data, self.start_time_ms)[m
[31m-[m
[31m-[m
     def control_loop(self, loop_delay: int):[m
         time.sleep(1)  # Let other threads start[m
         self.__zero_heat_zones()[m
[36m@@ -109,7 +118,11 @@[m [mclass ControlLoop:[m
         else:[m
             zones_status = self.__status_off(zones_status, tthz)[m
 [m
[31m-        self.broker.update_zones(zones_status)[m
[32m+[m[32m        zones_dict = [][m
[32m+[m[32m        for zone in zones_status:[m
[32m+[m[32m            zones_dict.append(asdict(zone))[m
[32m+[m
[32m+[m[32m        self.broker.update_zones(zones_dict)[m
 [m
     def start_firing(self):[m
         self.start_time_ms = time.time() * 1000  # Start or restart[m
[36m@@ -151,22 +164,22 @@[m [mclass ControlLoop:[m
             heats.append(0)[m
         self.kiln_zones.set_heat_for_zones(heats)[m
 [m
[31m-    def set_heat_for_zone_number(self, heat: int, zone_number:int):[m
[32m+[m[32m    def set_heat_for_zone_number(self, heat: int, zone_number: int):[m
         self.kiln_zones.zones[zone_number - 1].set_heat_factor(heat / 100)[m
 [m
     def __compute_heats_for_zones(self, zones_status: list, tthz: list) -> list:[m
         target = self.__profile_checks(zones_status)[m
         heats = [][m
         for index, zone in enumerate(tthz):[m
[31m-            zones_status[index]["target"] = target[m
[31m-            zones_status[index]["target_slope"] = self.profile.get_target_slope([m
[31m-                (zones_status[index]['time_ms'] - self.start_time_ms) / 1000)[m
[32m+[m[32m            zone.target = target[m
[32m+[m[32m            zone.target_slope = self.profile.get_target_slope([m
[32m+[m[32m                (zone.time_ms - self.start_time_ms) / 1000)[m
 [m
             delta_t = (zones_status[index]['time_ms'] - self.last_times[index]) / 1000[m
[31m-            self.last_times[index] = zones_status[index]['time_ms'][m
[32m+[m[32m            self.last_times[index] = zone.time_ms[m
 [m
             heat = self.__update_heat(target,[m
[31m-                                      zones_status,[m
[32m+[m[32m                                      zone,[m
                                       index,[m
                                       delta_t)[m
             # heat = self.update_heat_pid(target,[m
[36m@@ -183,9 +196,9 @@[m [mclass ControlLoop:[m
             log.warning('Control loop started before initializing Zones.')[m
         self.kiln_zones.all_heat_off()[m
         for index, zone in enumerate(zones_status):[m
[31m-            zone["target"] = 'Off'[m
[31m-            zone["target_slope"] = 0[m
[31m-            self.last_times[index] = zone['time_ms'][m
[32m+[m[32m            zone.target = 'Off'[m
[32m+[m[32m            zone.target_slope = 0[m
[32m+[m[32m            self.last_times[index] = zone.time_ms[m
 [m
         return zones_status[m
 [m
[36m@@ -196,10 +209,10 @@[m [mclass ControlLoop:[m
         heat_factor = 0[m
         zone_index = None[m
         for index, zone in enumerate(zones_status):[m
[31m-            if zone['temperature'] < min_temp:[m
[31m-                min_temp = zone['temperature'][m
[31m-                time_since_start = (zone['time_ms'] - start_time_ms) / 1000[m
[31m-                heat_factor = zone['heat_factor'][m
[32m+[m[32m            if zone.temperature < min_temp:[m
[32m+[m[32m                min_temp = zone.temperature[m
[32m+[m[32m                time_since_start = (zone.time_ms - start_time_ms) / 1000[m
[32m+[m[32m                heat_factor = zone.heat_factor[m
                 zone_index = index[m
 [m
         return min_temp, time_since_start, heat_factor, zone_index[m
[36m@@ -239,6 +252,7 @@[m [mclass ControlLoop:[m
     def smooth_temperatures(self, t_t_h_z: list) -> list:[m
         zones_status = [][m
         for zone_index, t_t_h in enumerate(t_t_h_z):[m
[32m+[m[32m            zone_status = ZoneStatus(time_ms=0, temperature=-3.0, curve_data=[])[m
             if len(t_t_h) > 0:  # No data happens on startup[m
                 median_result = self.data_filter.median(t_t_h)[m
                 if median_result is not None:[m
[36m@@ -259,18 +273,20 @@[m [mclass ControlLoop:[m
                 if isinstance(pstdev, float): pstdev = "{:.2f}".format(pstdev)[m
                 # if isinstance(stderror, float): stderror = "{:.2f}".format(stderror)[m
 [m
[31m-                zones_status.append({'time_ms': best_time,[m
[31m-                                     'temperature': best_temp,[m
[31m-                                     'curve_data': curve_data,[m
[31m-                                     'heat_factor': t_t_h[-1]['heat_factor'],[m
[31m-                                     'slope': slope,[m
[31m-                                     'curvature': curvature,[m
[31m-                                     'stderror': curvature,[m
[31m-                                     'pstdev': curvature})[m
[32m+[m[32m                zone_status.time_ms = best_time[m
[32m+[m[32m                zone_status.temperature = best_temp[m
[32m+[m[32m                zone_status.curve_data = curve_data[m
[32m+[m[32m                zone_status.heat_factor = t_t_h[-1]['heat_factor'][m
[32m+[m[32m                zone_status.slope = slope[m
[32m+[m[32m                zone_status.curvature = curvature[m
[32m+[m[32m                zone_status.stderror = curvature[m
[32m+[m[32m                zone_status.pstdev = curvature[m
[32m+[m
[32m+[m[32m                zones_status.append(zone_status)[m
 [m
         return zones_status[m
 [m
[31m-    def update_heat_pid(self, target: float, temp: float,  delta_tm: float) -> float:[m
[32m+[m[32m    def update_heat_pid(self, target: float, temp: float, delta_tm: float) -> float:[m
 [m
         if type(target) is not str:[m
             self.pid.setpoint = target[m
[36m@@ -280,8 +296,8 @@[m [mclass ControlLoop:[m
 [m
         return heat[m
 [m
[31m-    def __update_heat(self, target: float, zones_status: list, index: int, delta_tm: float) -> float:[m
[31m-        heat = zones_status[index]['heat_factor'][m
[32m+[m[32m    def __update_heat(self, target: float, zone: dataclass(), index: int, delta_tm: float) -> float:[m
[32m+[m[32m        heat = zone.heat_factor[m
 [m
         self.skipped[index] += 1[m
         print(self.skipped[index])[m
[36m@@ -291,13 +307,14 @@[m [mclass ControlLoop:[m
 [m
         future = 540  # seconds[m
         future_temp = self.profile.get_target_temperature(future +[m
[31m-                                                          (zones_status[index]['time_ms'] - self.start_time_ms) / 1000,[m
[32m+[m[32m                                                          (zone.time_ms - self.start_time_ms) / 1000,[m
                                                           future=True)[m
         if not isinstance(future_temp, str):[m
[31m-            temp = zones_status[index]['temperature'][m
[32m+[m[32m            temp = zone.temperature[m
             future_temp_error = future_temp - temp[m
[31m-            future_slope = future_temp_error / future  # This is the slope we need to hit the target temperature in future seconds[m
[31m-            slope_error = future_slope - zones_status[index]['slope'][m
[32m+[m[32m            future_slope = future_temp_error / future  # This is the slope we need to hit the target temperature in[m
[32m+[m[32m            # future seconds[m
[32m+[m[32m            slope_error = future_slope - zone.slope[m
 [m
             mcp = self.zones[index].mCp[m
             hA = self.zones[index].hA[m
[36m@@ -312,7 +329,7 @@[m [mclass ControlLoop:[m
             log.debug('******************************************************************')[m
             log.debug('temp: ' + str(temp))[m
             log.debug('Future temp: ' + str(future_temp))[m
[31m-            log.debug('Future temp at this slope: ' + str(zones_status[index]['slope'] * future + temp))[m
[32m+[m[32m            log.debug('Future temp at this slope: ' + str(zone.slope * future + temp))[m
             log.debug('Last Heat: ' + str(self.last_heat[index]))[m
             log.debug('Updated heat: ' + str(heat))[m
             log.debug('delta_power: ' + str(delta_power) + ' delta_leakage: ' + str(hA * future_temp_error))[m
